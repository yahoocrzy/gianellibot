import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional, List, Dict, Any
from services.clickup_api import ClickUpAPI
from services.claude_api import ClaudeAPI
from repositories.clickup_workspaces import ClickUpWorkspaceRepository
from repositories.claude_config import ClaudeConfigRepository
from utils.embed_factory import EmbedFactory
from utils.enhanced_selections import ListSelectView, TaskSelectView
from loguru import logger
import json
from datetime import datetime, timedelta

class AIEnhanced(commands.Cog):
    """Enhanced AI assistant that can make actual changes to ClickUp"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(name="ai-assistant", description="AI assistant that can perform actions on your tasks")
    async def ai_assistant(self, interaction: discord.Interaction):
        """Main AI assistant command with action capabilities"""
        
        # Check configurations
        workspace = await ClickUpWorkspaceRepository.get_default_workspace(interaction.guild_id)
        claude_config = await ClaudeConfigRepository.get_config(interaction.guild_id)
        
        if not workspace or not claude_config:
            embed = EmbedFactory.create_error_embed(
                "Setup Required",
                "Please setup both ClickUp workspace and Claude AI first.\n"
                f"{'‚ùå' if not workspace else '‚úÖ'} ClickUp: Use `/workspace-add`\n"
                f"{'‚ùå' if not claude_config else '‚úÖ'} Claude AI: Use `/claude-setup`"
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Show action selection
        embed = EmbedFactory.create_info_embed(
            "ü§ñ AI Assistant",
            "What would you like me to help you with today?"
        )
        
        class ActionSelect(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=300)
                self.selected_action = None
                
                actions = [
                    {"label": "üìù Create Task", "value": "create_task", "desc": "Create a new task with AI suggestions"},
                    {"label": "üîç Find Tasks", "value": "find_tasks", "desc": "Search and analyze your tasks"},
                    {"label": "‚úèÔ∏è Update Task", "value": "update_task", "desc": "Modify an existing task"},
                    {"label": "üìä Task Analysis", "value": "analyze_tasks", "desc": "Get insights about your tasks"},
                    {"label": "üéØ Prioritize Tasks", "value": "prioritize_tasks", "desc": "Help prioritize your task list"},
                    {"label": "üóÇÔ∏è Organize Tasks", "value": "organize_tasks", "desc": "Organize tasks by categories"},
                    {"label": "üìã Status Update", "value": "status_update", "desc": "Update multiple task statuses"},
                    {"label": "üí¨ Ask Question", "value": "ask_question", "desc": "Ask AI about your tasks or workflows"}
                ]
                
                options = []\n                for action in actions:\n                    options.append(\n                        discord.SelectOption(\n                            label=action[\"label\"],\n                            value=action[\"value\"],\n                            description=action[\"desc\"]\n                        )\n                    )\n                \n                select = discord.ui.Select(\n                    placeholder=\"Choose what you'd like me to do...\",\n                    options=options\n                )\n                select.callback = self.action_callback\n                self.add_item(select)\n            \n            async def action_callback(self, select_interaction: discord.Interaction):\n                self.selected_action = select_interaction.data['values'][0]\n                self.stop()\n                await select_interaction.response.defer_update()\n        \n        action_view = ActionSelect()\n        await interaction.response.send_message(embed=embed, view=action_view, ephemeral=True)\n        \n        timed_out = await action_view.wait()\n        if timed_out or not action_view.selected_action:\n            embed = EmbedFactory.create_error_embed(\"Timeout\", \"Action selection timed out.\")\n            await interaction.edit_original_response(embed=embed, view=None)\n            return\n        \n        # Get APIs\n        try:\n            clickup_token = await ClickUpWorkspaceRepository.get_decrypted_token(workspace)\n            claude_key = await ClaudeConfigRepository.get_decrypted_api_key(claude_config)\n            \n            clickup_api = ClickUpAPI(clickup_token)\n            claude_api = ClaudeAPI(claude_key)\n            \n            # Route to appropriate action\n            action = action_view.selected_action\n            \n            if action == \"create_task\":\n                await self.handle_create_task(interaction, clickup_api, claude_api)\n            elif action == \"find_tasks\":\n                await self.handle_find_tasks(interaction, clickup_api, claude_api)\n            elif action == \"update_task\":\n                await self.handle_update_task(interaction, clickup_api, claude_api)\n            elif action == \"analyze_tasks\":\n                await self.handle_analyze_tasks(interaction, clickup_api, claude_api)\n            elif action == \"prioritize_tasks\":\n                await self.handle_prioritize_tasks(interaction, clickup_api, claude_api)\n            elif action == \"organize_tasks\":\n                await self.handle_organize_tasks(interaction, clickup_api, claude_api)\n            elif action == \"status_update\":\n                await self.handle_status_update(interaction, clickup_api, claude_api)\n            elif action == \"ask_question\":\n                await self.handle_ask_question(interaction, clickup_api, claude_api)\n                \n        except Exception as e:\n            logger.error(f\"Error in AI assistant: {e}\")\n            embed = EmbedFactory.create_error_embed(\n                \"Error\",\n                f\"An error occurred: {str(e)}\"\n            )\n            await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_create_task(self, interaction: discord.Interaction, clickup_api: ClickUpAPI, claude_api: ClaudeAPI):\n        \"\"\"Handle AI-assisted task creation\"\"\"\n        embed = EmbedFactory.create_info_embed(\n            \"ü§ñ AI Task Creation\",\n            \"Let me help you create a task! What type of work is this?\"\n        )\n        \n        class TaskTypeSelect(discord.ui.View):\n            def __init__(self):\n                super().__init__(timeout=300)\n                self.selected_type = None\n                \n                task_types = [\n                    {\"label\": \"üêõ Bug Fix\", \"value\": \"bug\", \"desc\": \"Fix an issue or bug\"},\n                    {\"label\": \"‚ú® New Feature\", \"value\": \"feature\", \"desc\": \"Add new functionality\"},\n                    {\"label\": \"üìö Documentation\", \"value\": \"docs\", \"desc\": \"Write or update docs\"},\n                    {\"label\": \"üß™ Testing\", \"value\": \"testing\", \"desc\": \"Testing and QA work\"},\n                    {\"label\": \"üîß Improvement\", \"value\": \"improvement\", \"desc\": \"Enhance existing features\"},\n                    {\"label\": \"üìã General Task\", \"value\": \"task\", \"desc\": \"General work item\"}\n                ]\n                \n                options = []\n                for task_type in task_types:\n                    options.append(\n                        discord.SelectOption(\n                            label=task_type[\"label\"],\n                            value=task_type[\"value\"],\n                            description=task_type[\"desc\"]\n                        )\n                    )\n                \n                select = discord.ui.Select(\n                    placeholder=\"What type of task is this?\",\n                    options=options\n                )\n                select.callback = self.type_callback\n                self.add_item(select)\n            \n            async def type_callback(self, select_interaction: discord.Interaction):\n                self.selected_type = select_interaction.data['values'][0]\n                self.stop()\n                await select_interaction.response.defer_update()\n        \n        type_view = TaskTypeSelect()\n        await interaction.edit_original_response(embed=embed, view=type_view)\n        \n        timed_out = await type_view.wait()\n        if timed_out or not type_view.selected_type:\n            return\n        \n        task_type = type_view.selected_type\n        \n        # Get AI suggestions for this task type\n        embed = EmbedFactory.create_info_embed(\n            \"ü§ñ AI Suggestions\",\n            f\"Let me suggest some {task_type} tasks for you to choose from:\"\n        )\n        \n        try:\n            prompt = f\"\"\"Generate 8 realistic {task_type} task suggestions for a software development team. \n            Return as JSON array with objects containing 'name' and 'description' fields.\n            Make them practical and actionable.\n            \n            Example format:\n            [\n                {{\"name\": \"Fix login bug\", \"description\": \"Resolve authentication issue affecting user login\"}},\n                {{\"name\": \"Add search feature\", \"description\": \"Implement search functionality for dashboard\"}}\n            ]\n            \n            Return only the JSON array, no other text.\"\"\"\n            \n            ai_response = await claude_api.create_message(prompt, max_tokens=1000)\n            \n            if ai_response:\n                try:\n                    # Clean the response\n                    ai_response = ai_response.strip()\n                    if ai_response.startswith(\"```json\"):\n                        ai_response = ai_response[7:]\n                    if ai_response.endswith(\"```\"):\n                        ai_response = ai_response[:-3]\n                    \n                    suggested_tasks = json.loads(ai_response.strip())\n                    \n                    class TaskSuggestionSelect(discord.ui.View):\n                        def __init__(self, suggestions):\n                            super().__init__(timeout=300)\n                            self.selected_task = None\n                            \n                            options = []\n                            for i, task in enumerate(suggestions[:8]):\n                                options.append(\n                                    discord.SelectOption(\n                                        label=task[\"name\"][:100],\n                                        value=str(i),\n                                        description=task[\"description\"][:100]\n                                    )\n                                )\n                            \n                            select = discord.ui.Select(\n                                placeholder=\"Choose an AI-suggested task...\",\n                                options=options\n                            )\n                            select.callback = self.task_callback\n                            self.add_item(select)\n                        \n                        async def task_callback(self, select_interaction: discord.Interaction):\n                            task_index = int(select_interaction.data['values'][0])\n                            self.selected_task = suggested_tasks[task_index]\n                            self.stop()\n                            await select_interaction.response.defer_update()\n                    \n                    suggestion_view = TaskSuggestionSelect(suggested_tasks)\n                    await interaction.edit_original_response(embed=embed, view=suggestion_view)\n                    \n                    timed_out = await suggestion_view.wait()\n                    if timed_out or not suggestion_view.selected_task:\n                        return\n                    \n                    selected_task = suggestion_view.selected_task\n                    \n                except json.JSONDecodeError:\n                    # Fallback if AI response isn't valid JSON\n                    selected_task = {\n                        \"name\": f\"New {task_type} task\",\n                        \"description\": f\"AI-generated {task_type} task\"\n                    }\n            else:\n                selected_task = {\n                    \"name\": f\"New {task_type} task\",\n                    \"description\": f\"Standard {task_type} work item\"\n                }\n            \n            # Now create the task using existing flow\n            await self.create_task_with_ai_data(interaction, clickup_api, selected_task, task_type)\n            \n        except Exception as e:\n            logger.error(f\"Error in AI task creation: {e}\")\n            embed = EmbedFactory.create_error_embed(\n                \"Error\",\n                f\"AI task creation failed: {str(e)}\"\n            )\n            await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def create_task_with_ai_data(self, interaction: discord.Interaction, clickup_api: ClickUpAPI, task_data: Dict, task_type: str):\n        \"\"\"Create task using AI-generated data\"\"\"\n        async with clickup_api:\n            # List selection\n            list_view = ListSelectView(clickup_api)\n            \n            embed = EmbedFactory.create_info_embed(\n                \"Select List\",\n                f\"Where should I create: **{task_data['name']}**?\"\n            )\n            \n            await interaction.edit_original_response(embed=embed, view=None)\n            await list_view.start(interaction)\n            \n            timed_out = await list_view.wait()\n            if timed_out or not list_view.selected_list_id:\n                return\n            \n            # Set priority based on task type\n            priority_map = {\n                \"bug\": \"high\",\n                \"feature\": \"normal\", \n                \"docs\": \"low\",\n                \"testing\": \"normal\",\n                \"improvement\": \"normal\",\n                \"task\": \"normal\"\n            }\n            \n            priority = priority_map.get(task_type, \"normal\")\n            \n            # Create the task\n            try:\n                task_creation_data = {\n                    \"name\": task_data[\"name\"],\n                    \"description\": task_data[\"description\"],\n                    \"priority\": {\"priority\": priority}\n                }\n                \n                result = await clickup_api.create_task(list_view.selected_list_id, **task_creation_data)\n                \n                embed = EmbedFactory.create_success_embed(\n                    \"ü§ñ AI Task Created!\",\n                    f\"‚úÖ Successfully created: **{task_data['name']}**\"\n                )\n                \n                embed.add_field(name=\"List\", value=list_view.selected_list_name, inline=True)\n                embed.add_field(name=\"Priority\", value=priority.title(), inline=True)\n                embed.add_field(name=\"Type\", value=task_type.title(), inline=True)\n                \n                if result.get('url'):\n                    embed.add_field(name=\"View Task\", value=f\"[Click here]({result['url']})\", inline=False)\n                \n                embed.set_footer(text=\"ü§ñ Created with AI assistance\")\n                \n                await interaction.edit_original_response(embed=embed, view=None)\n                \n            except Exception as e:\n                logger.error(f\"Error creating AI task: {e}\")\n                embed = EmbedFactory.create_error_embed(\n                    \"Creation Failed\",\n                    f\"Failed to create task: {str(e)}\"\n                )\n                await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_analyze_tasks(self, interaction: discord.Interaction, clickup_api: ClickUpAPI, claude_api: ClaudeAPI):\n        \"\"\"Analyze tasks with AI\"\"\"\n        async with clickup_api:\n            # List selection\n            list_view = ListSelectView(clickup_api)\n            \n            embed = EmbedFactory.create_info_embed(\n                \"üìä Task Analysis\",\n                \"Which list would you like me to analyze?\"\n            )\n            \n            await interaction.edit_original_response(embed=embed, view=None)\n            await list_view.start(interaction)\n            \n            timed_out = await list_view.wait()\n            if timed_out or not list_view.selected_list_id:\n                return\n            \n            # Get tasks\n            embed = EmbedFactory.create_info_embed(\n                \"Analyzing Tasks\",\n                \"ü§ñ AI is analyzing your tasks...\"\n            )\n            await interaction.edit_original_response(embed=embed, view=None)\n            \n            try:\n                tasks = await clickup_api.get_tasks(list_view.selected_list_id)\n                \n                if not tasks:\n                    embed = EmbedFactory.create_info_embed(\n                        \"No Tasks Found\",\n                        \"This list doesn't have any tasks to analyze.\"\n                    )\n                    await interaction.edit_original_response(embed=embed, view=None)\n                    return\n                \n                # Get AI analysis\n                analysis = await claude_api.analyze_tasks(tasks)\n                \n                embed = EmbedFactory.create_info_embed(\n                    f\"ü§ñ AI Analysis: {list_view.selected_list_name}\",\n                    analysis\n                )\n                \n                embed.add_field(\n                    name=\"Task Summary\",\n                    value=f\"Analyzed {len(tasks)} tasks\",\n                    inline=True\n                )\n                \n                # Add quick stats\n                status_count = {}\n                priority_count = {}\n                \n                for task in tasks:\n                    status = task.get('status', {}).get('status', 'unknown')\n                    priority = task.get('priority', {}).get('priority', 'none')\n                    \n                    status_count[status] = status_count.get(status, 0) + 1\n                    priority_count[priority] = priority_count.get(priority, 0) + 1\n                \n                if status_count:\n                    status_summary = \"\\n\".join([f\"‚Ä¢ {status}: {count}\" for status, count in status_count.items()])\n                    embed.add_field(name=\"Status Distribution\", value=status_summary, inline=True)\n                \n                if priority_count:\n                    priority_summary = \"\\n\".join([f\"‚Ä¢ {priority}: {count}\" for priority, count in priority_count.items()])\n                    embed.add_field(name=\"Priority Distribution\", value=priority_summary, inline=True)\n                \n                embed.set_footer(text=\"ü§ñ Analysis powered by Claude AI\")\n                \n                await interaction.edit_original_response(embed=embed, view=None)\n                \n            except Exception as e:\n                logger.error(f\"Error in task analysis: {e}\")\n                embed = EmbedFactory.create_error_embed(\n                    \"Analysis Failed\",\n                    f\"AI analysis failed: {str(e)}\"\n                )\n                await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_ask_question(self, interaction: discord.Interaction, clickup_api: ClickUpAPI, claude_api: ClaudeAPI):\n        \"\"\"Handle questions about tasks and workflows\"\"\"\n        embed = EmbedFactory.create_info_embed(\n            \"ü§ñ Ask AI\",\n            \"What would you like to know?\"\n        )\n        \n        questions = [\n            \"What tasks should I prioritize today?\",\n            \"How can I improve my workflow?\",\n            \"What tasks are overdue?\",\n            \"How to organize my project better?\",\n            \"What's blocking my team's progress?\",\n            \"How to balance urgent vs important tasks?\",\n            \"What tasks can be automated?\",\n            \"How to improve task completion time?\",\n            \"What dependencies should I consider?\",\n            \"How to better estimate task effort?\"\n        ]\n        \n        class QuestionSelect(discord.ui.View):\n            def __init__(self):\n                super().__init__(timeout=300)\n                self.selected_question = None\n                \n                options = []\n                for question in questions:\n                    options.append(\n                        discord.SelectOption(\n                            label=question[:100],\n                            value=question,\n                            description=\"Ask this question\"\n                        )\n                    )\n                \n                select = discord.ui.Select(\n                    placeholder=\"Choose a question to ask...\",\n                    options=options\n                )\n                select.callback = self.question_callback\n                self.add_item(select)\n            \n            async def question_callback(self, select_interaction: discord.Interaction):\n                self.selected_question = select_interaction.data['values'][0]\n                self.stop()\n                await select_interaction.response.defer_update()\n        \n        question_view = QuestionSelect()\n        await interaction.edit_original_response(embed=embed, view=question_view)\n        \n        timed_out = await question_view.wait()\n        if timed_out or not question_view.selected_question:\n            return\n        \n        # Get AI response\n        embed = EmbedFactory.create_info_embed(\n            \"ü§ñ Thinking...\",\n            \"AI is preparing an answer...\"\n        )\n        await interaction.edit_original_response(embed=embed, view=None)\n        \n        try:\n            # Get some task context\n            async with clickup_api:\n                workspaces = await clickup_api.get_workspaces()\n                context = \"\\n\".join([f\"Workspace: {ws.get('name', 'Unknown')}\" for ws in workspaces[:3]])\n            \n            prompt = f\"\"\"You are a productivity and project management expert. Answer this question: \"{question_view.selected_question}\"\n            \n            Context: User is managing tasks in ClickUp with workspaces: {context}\n            \n            Provide a helpful, actionable answer in 2-3 paragraphs. Focus on practical advice.\"\"\"\n            \n            ai_response = await claude_api.create_message(prompt, max_tokens=800)\n            \n            if ai_response:\n                embed = EmbedFactory.create_info_embed(\n                    f\"ü§ñ AI Answer\",\n                    ai_response\n                )\n                \n                embed.add_field(\n                    name=\"Question Asked\",\n                    value=question_view.selected_question,\n                    inline=False\n                )\n                \n                embed.set_footer(text=\"ü§ñ Powered by Claude AI\")\n            else:\n                embed = EmbedFactory.create_error_embed(\n                    \"No Response\",\n                    \"AI couldn't generate a response. Please try again.\"\n                )\n            \n            await interaction.edit_original_response(embed=embed, view=None)\n            \n        except Exception as e:\n            logger.error(f\"Error in AI question handling: {e}\")\n            embed = EmbedFactory.create_error_embed(\n                \"Error\",\n                f\"Failed to get AI response: {str(e)}\"\n            )\n            await interaction.edit_original_response(embed=embed, view=None)\n    \n    # Add placeholder methods for other actions\n    async def handle_find_tasks(self, interaction, clickup_api, claude_api):\n        embed = EmbedFactory.create_info_embed(\"Coming Soon\", \"Task search with AI is coming soon!\")\n        await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_update_task(self, interaction, clickup_api, claude_api):\n        embed = EmbedFactory.create_info_embed(\"Coming Soon\", \"AI task updates coming soon!\")\n        await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_prioritize_tasks(self, interaction, clickup_api, claude_api):\n        embed = EmbedFactory.create_info_embed(\"Coming Soon\", \"AI task prioritization coming soon!\")\n        await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_organize_tasks(self, interaction, clickup_api, claude_api):\n        embed = EmbedFactory.create_info_embed(\"Coming Soon\", \"AI task organization coming soon!\")\n        await interaction.edit_original_response(embed=embed, view=None)\n    \n    async def handle_status_update(self, interaction, clickup_api, claude_api):\n        embed = EmbedFactory.create_info_embed(\"Coming Soon\", \"Bulk status updates coming soon!\")\n        await interaction.edit_original_response(embed=embed, view=None)\n\nasync def setup(bot):\n    await bot.add_cog(AIEnhanced(bot))